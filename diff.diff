diff --git a/c_tracking/cfg/Parameters.cfg b/c_tracking/cfg/Parameters.cfg
index 1c1a887..86e28ab 100755
--- a/c_tracking/cfg/Parameters.cfg
+++ b/c_tracking/cfg/Parameters.cfg
@@ -5,18 +5,19 @@ from dynamic_reconfigure.parameter_generator_catkin import *
 
 gen = ParameterGenerator()
 
-#Extraction parameters
-gen.add("extraction_threshold", int_t, 0, "Threshold for feature extraction", 10,  0, 100)
+# Extraction parameters
+gen.add("extraction_threshold", int_t, 0, "Threshold for feature extraction", 20, 0, 100)
 
-#Bounding box parameter
-gen.add("boundingBox_xScaling", double_t, 0, "Bounding box initialization scaling on the x direction", 1.1, 1.0, 1.5)
+# Bounding box parameter
+gen.add("boundingBox_xScaling", double_t, 0, "Bounding box initialization scaling on the x direction", 1.25, 1.0, 1.5)
 gen.add("boundingBox_yScaling", double_t, 0, "Bounding box initialization scaling on the y direction", 1.2, 1.0, 1.5)
 
-#Matching parameters
-gen.add("matching_minPercentage", double_t, 0, "Minimum percentage of ionitial keypoints to set the object as detected", 0.33,  0.0, 1.0)
-gen.add("matching_keyframePercentage", double_t, 0, "Percentage of keypoints below wich a new keyframe is considered", 0.6,  0.0, 1.0)
+# Matching parameters
+gen.add("matching_minPercentage", double_t, 0, "Minimum percentage of initial keypoints to set the object as detected", 0.33, 0.0, 1.0)
+gen.add("matching_keyframePercentage", double_t, 0, "Percentage of keypoints below wich a new keyframe is considered", 0.5, 0.0, 1.0)
+gen.add("matching_keyFrameMaxAngle", double_t, 0, "Maximum angle deviation upon wich a new keyframe is considered", 1.0, 0.0, 45.0)
 
-#Outlier rejection
-gen.add("outlier_maxAngle", double_t, 0, "Maximum angle allowed to be considered an inlier, in degrees", 5.0,  0.0, 45.0)
+# Outlier rejection
+gen.add("outlier_maxAngle", double_t, 0, "Maximum angle allowed to be considered an inlier, in degrees", 5.0, 0.0, 45.0)
 
-exit(gen.generate(PACKAGE, "c_tracking", "Parameters"))
\ No newline at end of file
+exit(gen.generate(PACKAGE, "c_tracking", "Parameters"))
diff --git a/c_tracking/include/CMT.h b/c_tracking/include/CMT.h
index 3980bdc..6d53851 100644
--- a/c_tracking/include/CMT.h
+++ b/c_tracking/include/CMT.h
@@ -97,7 +97,6 @@ private:
 	int thrOutlier;
 	float thrConf;
 	float thrRatio;
-	MatchingParam& param;
 
 	//Object model data
 	cv::Mat selectedFeatures;
@@ -125,6 +124,9 @@ private:
 
 	//Probably useless
 	std::vector<std::pair<cv::KeyPoint, int> > outliers;
+
+protected:
+	MatchingParam& param;
 };
 
 #endif // CMT_H
diff --git a/c_tracking/include/ParameterServer.h b/c_tracking/include/ParameterServer.h
index 677bdef..3f77617 100644
--- a/c_tracking/include/ParameterServer.h
+++ b/c_tracking/include/ParameterServer.h
@@ -49,6 +49,7 @@ struct MatchingParam
 {
 	double minPercentage;
 	double keyframePercentage;
+	double keyFrameMaxAngle;
 };
 
 class ParameterServer
@@ -66,12 +67,12 @@ public:
 		return boundingBox;
 	}
 
-	inline OutlierParam& getOutlierParam()
+	inline OutlierParam& getOutlier()
 	{
 		return outlier;
 	}
 
-	inline MatchingParam& getMatchingParam()
+	inline MatchingParam& getMatching()
 	{
 		return matching;
 	}
diff --git a/c_tracking/include/Track.h b/c_tracking/include/Track.h
index 7d106f0..2665ded 100644
--- a/c_tracking/include/Track.h
+++ b/c_tracking/include/Track.h
@@ -32,8 +32,8 @@
 class Track: public CMT
 {
 public:
-	Track(ParameterServer& param) :
-				CMT(param.getMatchingParam())
+	Track(MatchingParam& param) :
+				CMT(param)
 	{
 		outlier = false;
 		id = 0;
@@ -41,9 +41,9 @@ public:
 	}
 
 	inline void processFrame(const cv::Mat& im_gray,
-				std::vector<cv::KeyPoint>& keypoints, cv::Mat& features)
+				std::vector<cv::KeyPoint>& keypoints, cv::Mat& features, double roll)
 	{
-		CMT::processFrame(im_gray, keypoints, features, forceKeyFrame());
+		CMT::processFrame(im_gray, keypoints, features, forceKeyFrame(roll));
 	}
 
 	inline void setId(const uint64_t& id)
@@ -82,11 +82,21 @@ public:
 		outlier = true;
 	}
 
+	inline bool isRotationBounded(double roll, double maxAngle)
+	{
+		double estimatedRotation = getCurrentRotation();
+
+		return abs(angles::shortest_angular_distance(estimatedRotation, roll))
+					<= maxAngle;
+	}
+
 private:
-	inline bool forceKeyFrame()
+	inline bool forceKeyFrame(double roll)
 	{
-		bool force = outlier;
+		bool force = outlier || !isRotationBounded(roll, param.keyFrameMaxAngle);
+
 		outlier = false;
+
 		return force;
 	}
 
@@ -95,6 +105,7 @@ private:
 	uint64_t id;
 	double initialRotation;
 	bool outlier;
+
 };
 
 #endif /* TRACK_H_ */
diff --git a/c_tracking/src/Dispatcher.cpp b/c_tracking/src/Dispatcher.cpp
index 2c88dfa..424fedf 100644
--- a/c_tracking/src/Dispatcher.cpp
+++ b/c_tracking/src/Dispatcher.cpp
@@ -82,7 +82,7 @@ void Dispatcher::handleImage(const sensor_msgs::ImageConstPtr& msg)
 	{
 		Track& track = *tracks[i];
 		Mat& grayImage = cv_ptr->image;
-		track.processFrame(grayImage, keypoints, features);
+		track.processFrame(grayImage, keypoints, features, roll);
 
 		if (track.found() && isInlier(track))
 		{
@@ -97,6 +97,10 @@ void Dispatcher::handleImage(const sensor_msgs::ImageConstPtr& msg)
 			//draw results
 			drawResults(coloredImage, roi, track);
 		}
+		else
+		{
+			track.setOutlierFlag();
+		}
 	}
 
 	imshow(src_window, coloredImage);
@@ -122,7 +126,7 @@ void Dispatcher::handleObjectTrackRequest(
 
 		//setup tracker
 		featureExtractor.discriminateKeyPoints(cv_ptr->image, data);
-		Track* track = new Track(parameterServer);
+		Track* track = new Track(parameterServer.getMatching());
 		track->initialize(cv_ptr->image, data);
 		track->setId(nextId++);
 		track->setLabel(polygonMessage.polygonLabel);
@@ -171,11 +175,10 @@ Dispatcher::~Dispatcher()
 
 bool Dispatcher::isInlier(Track& track)
 {
-	OutlierParam& param = parameterServer.getOutlierParam();
+	OutlierParam& param = parameterServer.getOutlier();
 	double estimatedRotation = track.getCurrentRotation();
 
-	return abs(angles::shortest_angular_distance(estimatedRotation, roll))
-				<= param.maxAngle;
+	return track.isRotationBounded(roll, param.maxAngle);
 
 }
 
diff --git a/c_tracking/src/ParameterServer.cpp b/c_tracking/src/ParameterServer.cpp
index b7203bc..0b9eab1 100644
--- a/c_tracking/src/ParameterServer.cpp
+++ b/c_tracking/src/ParameterServer.cpp
@@ -45,6 +45,7 @@ void ParameterServer::update(c_tracking::ParametersConfig &config,
 	//Set the matching parameters
 	matching.minPercentage = config.matching_minPercentage;
 	matching.keyframePercentage = config.matching_keyframePercentage;
+	matching.keyFrameMaxAngle = angles::from_degrees(config.matching_keyFrameMaxAngle);
 
 	//Set the outlier rejection parameters
 	outlier.maxAngle = angles::from_degrees(config.outlier_maxAngle);
