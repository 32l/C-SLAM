#!/usr/bin/env python
PACKAGE = "c_vision"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Enum for kernel size
kernel_enum = gen.enum([ gen.const("3", int_t, 3, "A small kernel"),
                         gen.const("5", int_t, 5, "A medium kernel"),
                         gen.const("7", int_t, 7, "A large kernel")],
                       "An enum to set kernel size")

#Canny parameters
gen.add("canny_automatic", bool_t, 0, "Use automatic thresholding", False)
gen.add("canny_alpha", double_t, 0, "Ratio bewteen low and high threshold (automatic only)", 0.4, 0.0, 1.0)
gen.add("canny_apertureSize", int_t, 0, "Canny apertureSize", 3, 3, 7, edit_method=kernel_enum)
gen.add("canny_low", int_t, 0, "Canny low threshold", 10, 0, 300)
gen.add("canny_high", int_t, 0, "Canny high threshold", 45, 0, 300)
gen.add("canny_blur", int_t, 0, "Gaussian blur befor canny", 5, 3, 7, edit_method=kernel_enum)

#Hough parameters
gen.add("hough_rho", int_t, 0, "Hough rho quantization in pixels", 1, 1, 20)
gen.add("hough_teta", double_t, 0, "Hough teta quantization in degrees", 1.0, 0.01, 10.0) 
gen.add("hough_threshold", int_t, 0, "Hough threshold", 50, 0, 100)
gen.add("hough_minLineLenght", int_t, 0, "Hough minimum line length", 20, 0, 200)
gen.add("hough_maxLineGap", int_t, 0, "Hough maximum line gap", 15, 0, 50)

#Line filter parameters
gen.add("filter_maxDeltaHorizontal", double_t, 0, "Maximum horizontal line difference w.r.t. reference", 10.0, 0.0, 45.0) 
gen.add("filter_maxDeltaVertical", double_t, 0,  "Maximum vertical line difference w.r.t. reference", 5.0, 0.0, 45.0)

#Quadrilateral detection parameters
gen.add("quad_verticalOverlap", double_t, 0,  "Minimum vertical overlap for segments", 0.9, 0.0, 1.0)
gen.add("quad_horizontalOverlap", double_t, 0,  "Minimum horizontal overlap for segments", 0.9, 0.0, 1.0)
gen.add("quad_polesFormFactor", double_t, 0,  "Poles form factor", 6.0, 6, 30)
gen.add("quad_segmentSupport", double_t, 0, "Minimum theoretical support for segments", 0.45, 0.0, 1.0)

#corner detection parameters
gen.add("corner_kernelSize", int_t, 0, "Corner classifier (half) kernel size", 10, 2, 100)
gen.add("corner_bucketWidth", int_t, 0, "Corner classifier (half) bucket width", 2, 1, 30)

#Clustering parameters
gen.add("cluster_threshold", int_t, 0, "Cluster feature extraction threshold", 30, 0, 100)
gen.add("cluster_minPoints", int_t, 0, "Cluster minimum size", 4, 1, 200)
gen.add("cluster_maxDistance", double_t, 0, "Cluster maximum internal distance", 15.0, 0.0, 200.0)

#Classifier parameters
gen.add("classifier_threshold", double_t, 0, "FTCR threshold", 0.2, 0.0, 1.0) 

#Displayer parameters
gen.add("displayer_currentObject", int_t, 0, "Current object to display", 0, 0, 100) 

exit(gen.generate(PACKAGE, "c_vision", "Parameters"))