/* Dichiarazione delle MF per gli input */
FUZZIFY Input
	Near := tol(100,200);
	Medium := tra(100,200,300,400);
	Far := tor(300,400);
END_FUZZIFY

FUZZIFY Prova
	Near := tol(100,200);
	Medium := tra(100,200,300,400);
	Far := tor(300,400);
END_FUZZIFY

/* Dichiarazione delle MF per gli output */
FUZZIFY Output1 
	Ok :=  sgt(1);
END_FUZZIFY

FUZZIFY Output2
	Ok :=  sgt(1);
END_FUZZIFY

FUZZIFY Output3
	Ok :=  sgt(1);
END_FUZZIFY

FUZZIFY Output4
	Ok :=  sgt(1);
END_FUZZIFY

FUZZIFY Output5
	Bad := sgt(0);
	Ok := sgt(1);
END_FUZZIFY

FUZZIFY Output6
	Ok := sgt(1);
END_FUZZIFY

FUZZIFY_CLASS TestClass
	FUZZIFY prova
		Random := tol(100, 200);
	END_FUZZIFY
	
	FUZZIFY bim
		Ok := sgt(1);
	END_FUZZIFY
	
	FUZZIFY bum
		Ok := sgt(1);
	END_FUZZIFY
	
	FUZZIFY bam
		Ok := sgt(1);
	END_FUZZIFY
	
	FUZZIFY_PREDICATE ?x
		Predicate := (?x is Good);
		
		FUZZIFY ?x
			Good := tol(0, 100);
		END_FUZZIFY

	END_FUZZIFY_PREDICATE
	
END_FUZZIFY_CLASS


FUZZIFY_PREDICATE ?x
	Predicate := (?x is Good);
	
	FUZZIFY ?x
		Good := tol(0, 100);
	END_FUZZIFY

END_FUZZIFY_PREDICATE


/* Knowledge base */
if (Input is Near) then (Output1 is Ok); 
if (Prova is Near) then (Output1 is Ok);
if (Input is Medium) and (Prova is Medium) then (Output2 is Ok); 
if (Input is Far) and (Prova is Far) then (Output3 is Ok);
if (Prova is Near) then (Output4 is Ok);
if (Input is Near) or (Input is Medium) then (Output5 is Bad);
if (Prova is Medium) then (Output5 is Ok);
if (TestClass.prova is Random) then (Output6 is Ok);

if Predicate(h) then (TestClass.bim is Ok);
if TestClass.Predicate(TestClass.i) then (TestClass.bum is Ok);
if (TestClass.prova is Random) then (TestClass.bam is Ok);



