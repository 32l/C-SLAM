cmake_minimum_required(VERSION 2.8.3)

find_package(catkin REQUIRED COMPONENTS roscpp)
project(c_fuzzy)

# If catkin is not found, just compile the executable without ROS goodies
if(catkin_FOUND)
	catkin_package()
	include_directories(include include/libc_fuzzy ${catkin_INCLUDE_DIRS})
else()
	include_directories(${PROJECT_SOURCE_DIR}/include ${PROJECT_SOURCE_DIR}/include/libc_fuzzy)
endif()

include_directories(include ${catkin_INCLUDE_DIRS})


#search for Bison and Flex packages
find_package(BISON REQUIRED)
find_package(FLEX REQUIRED)

#set the folder of c_fuzzy_lib
set(LIBC_FUZZY_SOURCE_DIR ${PROJECT_SOURCE_DIR}/src/libc_fuzzy)


#generate parser and lexer from flex and Bison sources
bison_target(Parser ${LIBC_FUZZY_SOURCE_DIR}/parser.y ${LIBC_FUZZY_SOURCE_DIR}/FuzzyParser.tab.cpp COMPILE_FLAGS --defines="${PROJECT_SOURCE_DIR}/include/FuzzyParser.tab.h")
flex_target(Scanner ${LIBC_FUZZY_SOURCE_DIR}/scanner.l ${LIBC_FUZZY_SOURCE_DIR}/FuzzyScanner.cpp)

#move generated files into include directory
add_custom_target(Headers
		COMMAND ${CMAKE_COMMAND} -E copy ${LIBC_FUZZY_SOURCE_DIR}/stack.hh ${PROJECT_SOURCE_DIR}/include/libc_fuzzy/stack.hh
		COMMAND ${CMAKE_COMMAND} -E copy ${LIBC_FUZZY_SOURCE_DIR}/position.hh ${PROJECT_SOURCE_DIR}/include/libc_fuzzy/position.hh
		COMMAND ${CMAKE_COMMAND} -E copy ${LIBC_FUZZY_SOURCE_DIR}/location.hh ${PROJECT_SOURCE_DIR}/include/libc_fuzzy/location.hh
		DEPENDS ${BISON_Parser_OUTPUTS})

#add dependencies between parser and scanner (.l e .y)
add_flex_bison_dependency(Scanner Parser)


#build the library
add_library(${PROJECT_NAME} STATIC
			${LIBC_FUZZY_SOURCE_DIR}/FuzzyAggregator.cpp  
			${LIBC_FUZZY_SOURCE_DIR}/FuzzyBuilder.cpp  
			${LIBC_FUZZY_SOURCE_DIR}/FuzzyMF.cpp  
			${LIBC_FUZZY_SOURCE_DIR}/FuzzyOperator.cpp  
			${LIBC_FUZZY_SOURCE_DIR}/FuzzyParser.tab.cpp  
			${LIBC_FUZZY_SOURCE_DIR}/FuzzyReasoner.cpp  
			${LIBC_FUZZY_SOURCE_DIR}/FuzzyRule.cpp  
			${LIBC_FUZZY_SOURCE_DIR}/FuzzyScanner.cpp
			${FLEX_Scanner_OUTPUTS}
			${BISON_Parser_OUTPUTS})

#remember to move the headers into include!
add_dependencies(${PROJECT_NAME} Headers)

#build a test application
add_executable(prova src/test.cpp)

target_link_libraries(prova ${PROJECT_NAME})

#clean all remaining headers
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
		COMMAND ${CMAKE_COMMAND} -E echo "cleaning *.hh files autogenerated in src"
		COMMAND ${CMAKE_COMMAND} -E remove ${PROJECT_SOURCE_DIR}/src/stack.hh ${PROJECT_SOURCE_DIR}/src/position.hh ${PROJECT_SOURCE_DIR}/src/location.hh)
		
		
#now build the ros node
if(catkin_FOUND)

add_executable(${PROJECT_NAME}_reasoner src/main.cpp)
target_link_libraries(${PROJECT_NAME}_reasoner ${catkin_LIBRARIES})

endif()
